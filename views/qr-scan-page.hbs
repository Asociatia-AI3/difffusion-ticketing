{{!-- views/qr-scan-page.hbs --}}
{{#> main}}
{{#*inline "content"}}
<div class="container mx-auto px-2 sm:px-4 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8">
        <div class="lg:col-span-1 bg-white p-4 sm:p-6 rounded-xl shadow-lg ring-1 ring-gray-900/5 order-3 lg:order-3">
            <p id="logout" class="text-sm text-gray-500 hover:text-gray-700 transition-colors duration-200">
                    Logout
            </p>
        </div>
        <div class="lg:col-span-1 bg-white p-4 sm:p-6 rounded-xl shadow-lg ring-1 ring-gray-900/5 order-2 lg:order-1">
            <h2 class="text-xl font-semibold text-gray-800 mb-1">Partner:
                <span id="displayPartnerName" class="text-indigo-600">
                    {{#if partnerName}}{{partnerName}}{{else}}{{partnerId}}{{/if}}
                </span>
            </h2>
            <p id="currentVenueInfo" class="text-base text-gray-700 mb-4">
                Venue:
                <span id="displayVenueName" class="text-indigo-600 font-medium">
                    {{#if venueName}}{{venueName}}{{else}}{{venueId}}{{/if}}
                </span>
            </p>

            <h3 class="text-lg font-semibold text-gray-700 mb-3">Available Discounts at This Venue:</h3>
            <p class="text-xs text-gray-500 mb-2 italic">Please select a discount before validating.</p>
            <div id="discountsListContainer" class="space-y-2 max-h-[50vh] overflow-y-auto pr-2">
                <p id="discountsLoadingMessage" class="text-gray-500 italic">Loading discounts...</p>
            </div>
        </div>

        <div class="lg:col-span-2 bg-white p-4 sm:p-6 rounded-xl shadow-lg ring-1 ring-gray-900/5 order-1 lg:order-2">
            <p class="text-center text-gray-600 mb-1">{{message}}</p>
            <div class="flex justify-center mb-4">
                <button id="startScanButton"
                    class="py-3 px-6 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition-colors">
                    📷 Start QR Scan
                </button>
            </div>
            <div id="qrScannerUiContainer" class="mt-4 max-w-xs sm:max-w-sm mx-auto rounded-md">
            </div>
            <p id="scanResultMessage" class="mt-3 text-center font-medium h-10"></p>
            <div id="validationResultDetails" class="mt-4 p-3 bg-gray-50 rounded-md border border-gray-200"
                style="display: none;">
                <h4 class="font-semibold text-gray-700 mb-1">Validation Details:</h4>
                <p id="detailTicketCode" class="text-sm text-gray-600"></p>
                <p id="detailDiscountInfo" class="text-sm text-gray-600"></p>
                <p id="detailUserInfo" class="text-sm text-gray-600"></p>
            </div>
        </div>

        <div class="lg:col-span-3 bg-white p-4 sm:p-6 rounded-xl shadow-lg ring-1 ring-gray-900/5 order-4 mt-4">
            <h3 class="text-lg font-semibold text-gray-700 mb-3">Admin Setup</h3>
            <a href="/admin-setup" class="text-indigo-600 hover:underline">Go to Admin Setup Page</a>
        </div>
    </div>
</div>

<script src="https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js"></script>

<script>
    const logoutP = document.getElementById('logout');
    logoutP.addEventListener('click', function () {
        localStorage.removeItem("partnerId");
        localStorage.removeItem("venueId");
        localStorage.removeItem("partnerName");
        localStorage.removeItem("venueName");
        window.location.href = '/';
    });

    const HBS_PARTNER_ID = localStorage.getItem("partnerId") || "{{partnerId}}";
    const HBS_VENUE_ID = localStorage.getItem("venueId") || "{{venueId}}";
    const HBS_PARTNER_NAME = localStorage.getItem("partnerName") || "{{partnerName}}";
    const HBS_VENUE_NAME = localStorage.getItem("venueName") || "{{venueName}}";
    
    let pageTitle, displayPartnerNameSpan, displayVenueNameSpan,
        discountsListContainer, discountsLoadingMessage,
        startScanButton, qrScannerUiContainerId = "qrScannerUiContainer",
        scanResultMessage, validationResultDetails, detailTicketCode,
        detailDiscountInfo, detailUserInfo;

    let html5QrcodeScanner = null;
    let isScannerActive = false;
    const activePartnerId = HBS_PARTNER_ID;
    const activeVenueId = HBS_VENUE_ID;
    let selectedDiscountId = null;

    function initializeDOMElements() {
        pageTitle = document.getElementById('pageTitle');
        displayPartnerNameSpan = document.getElementById('displayPartnerName');
        displayVenueNameSpan = document.getElementById('displayVenueName');
        discountsListContainer = document.getElementById('discountsListContainer');
        discountsLoadingMessage = document.getElementById('discountsLoadingMessage');
        startScanButton = document.getElementById('startScanButton');
        scanResultMessage = document.getElementById('scanResultMessage');
        validationResultDetails = document.getElementById('validationResultDetails');
        detailTicketCode = document.getElementById('detailTicketCode');
        detailDiscountInfo = document.getElementById('detailDiscountInfo');
        detailUserInfo = document.getElementById('detailUserInfo');
    }

    function updateElementText(element, text, defaultText = "Unknown") {
        if (element) element.textContent = text || defaultText;
    }

    function toggleElementDisplay(element, show) {
        if (element) element.style.display = show ? 'block' : 'none';
    }

    async function fetchAndRenderDiscounts() {
        if (!activeVenueId || activeVenueId === 'undefined' || activeVenueId === '') {
            updateElementText(discountsLoadingMessage, "Venue ID not specified. Cannot load discounts.");
            if (discountsListContainer) discountsListContainer.innerHTML = '';
            return;
        }

        updateElementText(discountsLoadingMessage, "Loading discounts...");
        toggleElementDisplay(discountsLoadingMessage, true);

        try {
            const response = await fetch(`/discounts/venue/${activeVenueId}`);
            const discountData = await response.json();
            console.log("Discounts response:", discountData);

            toggleElementDisplay(discountsLoadingMessage, false);

            if (response.ok && discountData && Array.isArray(discountData.discounts)) {
                renderDiscounts(discountData.discounts);
                updateElementText(displayPartnerNameSpan, discountData.partnerName || HBS_PARTNER_NAME || `ID: ${activePartnerId}`);
                updateElementText(displayVenueNameSpan, discountData.venueName || HBS_VENUE_NAME || `ID: ${activeVenueId}`);
            } else {
                throw new Error(discountData?.message || 'Venue discounts could not be loaded or format is invalid.');
            }
        } catch (error) {
            console.error('Discount fetch error:', error);
            toggleElementDisplay(discountsLoadingMessage, false);
            if (discountsListContainer) discountsListContainer.innerHTML = `<p class="text-red-500 p-3 bg-red-100 rounded-md">An error occurred while loading discounts: ${error.message}</p>`;
        }
    }

    function renderDiscounts(discounts) {
        if (!discountsListContainer) return;
        discountsListContainer.innerHTML = '';
        selectedDiscountId = null;

        if (!discounts || discounts.length === 0) {
            discountsListContainer.innerHTML = '<p class="text-sm text-gray-500 italic">No discounts defined for this venue.</p>';
            return;
        }

        const ul = document.createElement('ul');
        ul.className = 'space-y-2';
        discounts.forEach(discount => {
            const li = document.createElement('li');
            li.className = 'bg-gray-50 p-3 rounded-md shadow-sm border border-gray-200 hover:bg-gray-100 cursor-pointer transition-colors';
            li.dataset.discountId = discount.id;
            li.innerHTML = `
                <div class="flex justify-between items-start gap-1">
                    <div>
                        <p class="font-medium text-sm text-gray-700 pointer-events-none">${discount.name || 'Unnamed Discount'}</p>
                        ${discount.description ? `<p class="text-xs text-gray-500 pointer-events-none">${discount.description}</p>` : ''}
                    </div>
                    <span class="text-xs font-semibold ${discount.percentOff > 0 ? 'text-green-700 bg-green-200' : 'text-blue-700 bg-blue-200'} px-1.5 py-0.5 rounded-full whitespace-nowrap pointer-events-none">
                        ${discount.percentOff > 0 ? `%${discount.percentOff}` : 'Special'}
                    </span>
                </div>
                <p class="text-xs text-gray-500 mt-0.5 pointer-events-none">Max Uses: ${discount.maxUses || discount.max_uses || 'N/A'} / ticket</p>
            `;

            li.addEventListener('click', function () {
                ul.querySelectorAll('li').forEach(item => {
                    item.classList.remove('ring-2', 'ring-blue-500', 'bg-blue-50');
                    item.classList.add('bg-gray-50', 'hover:bg-gray-100');
                });
                this.classList.add('ring-2', 'ring-blue-500', 'bg-blue-50');
                this.classList.remove('bg-gray-50', 'hover:bg-gray-100');
                selectedDiscountId = this.dataset.discountId;
                console.log("Selected Discount ID:", selectedDiscountId);
                updateElementText(scanResultMessage, '');
            });
            ul.appendChild(li);
        });
        discountsListContainer.appendChild(ul);
    }

    async function onScanSuccess(decodedText, decodedResult) {
        updateElementText(scanResultMessage, `Scanned Ticket Code: ${decodedText}`);
        if (scanResultMessage) scanResultMessage.className = 'mt-3 text-center font-medium h-10 text-gray-600';

        await clearScannerUi();

        if (!selectedDiscountId) {
            updateElementText(scanResultMessage, 'Please select a discount!');
            if (scanResultMessage) scanResultMessage.className = 'mt-3 text-center font-medium text-yellow-600 h-10';
            return;
        }

        try {
            updateElementText(scanResultMessage, `${decodedText} is being validated (Discount: ${selectedDiscountId})...`);
            console.log("Validation request sent:", decodedText, "Discount ID:", selectedDiscountId);
            const validationResponse = await fetch('/ticket-uses/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    ticketCode: decodedText,
                    discountId: selectedDiscountId,
                })
            });
            const validationData = await validationResponse.json();

            toggleElementDisplay(validationResultDetails, true);
            updateElementText(detailTicketCode, `Ticket Code: ${decodedText}`);
            // Refresh the discount list after a successful validation
            fetchAndRenderDiscounts();

            if (validationResponse.ok && validationData.isValid) {
                updateElementText(scanResultMessage, `Ticket is Valid!`);
                if (scanResultMessage) scanResultMessage.className = 'mt-3 text-center font-medium text-green-600 h-10';
                updateElementText(detailDiscountInfo, `Applied Discount: ${validationData.discountName || 'Not specified'} (ID: ${selectedDiscountId})`);
                updateElementText(detailUserInfo, `User: ${validationData.userName || 'Unknown'}`); 
            } else {
                updateElementText(scanResultMessage, `Ticket is Invalid!`);
                if (scanResultMessage) scanResultMessage.className = 'mt-3 text-center font-medium text-red-600 h-10';
                updateElementText(detailDiscountInfo, `Status: ${validationData.message || 'Could not be validated.'} (Discount ID: ${selectedDiscountId})`);
                updateElementText(detailUserInfo, '');
            }
        } catch (err) {
            console.error("Validation error:", err);
            updateElementText(scanResultMessage, `Validation error: ${err.message}`);
            if (scanResultMessage) scanResultMessage.className = 'mt-3 text-center font-medium text-red-600 h-10';
            toggleElementDisplay(validationResultDetails, false);
        }
    }

    function onScanFailure(error) {
    }

    async function clearScannerUi() {
        if (html5QrcodeScanner) {
            try {
                if (isScannerActive) {
                    await html5QrcodeScanner.clear();
                }
            } catch (error) {
                console.warn("Error while clearing scanner (probably already closed):", error);
            } finally {
                isScannerActive = false;
                updateElementText(startScanButton, '📷 Start QR Scan');
            }
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        if (!localStorage.getItem("partnerId") || localStorage.getItem("partnerId") === 'undefined' || localStorage.getItem("venueId") === 'undefined'  || localStorage.getItem("venueId") === '') {
            window.location.href = '/partner-login';
        }

        initializeDOMElements();

        updateElementText(displayPartnerNameSpan, (HBS_PARTNER_NAME && HBS_PARTNER_NAME !== "undefined" && HBS_PARTNER_NAME !== "{{partnerName}}") ? HBS_PARTNER_NAME : `ID: ${activePartnerId}`);
        updateElementText(displayVenueNameSpan, (HBS_VENUE_NAME && HBS_VENUE_NAME !== "undefined" && HBS_VENUE_NAME !== "{{venueName}}") ? HBS_VENUE_NAME : `ID: ${activeVenueId}`);

        if (!activePartnerId) {
            if (pageTitle) pageTitle.textContent = "Invalid Access: Missing Partner ID";
            updateElementText(discountsLoadingMessage, "Partner ID not found.");
            if (startScanButton) startScanButton.disabled = true;
            return;
        }

        fetchAndRenderDiscounts();

        if (startScanButton) {
            startScanButton.addEventListener('click', () => {
                toggleElementDisplay(validationResultDetails, false);
                if (selectedDiscountId) {
                    updateElementText(scanResultMessage, 'Starting camera...');
                } else {
                    updateElementText(scanResultMessage, 'Please select a discount first, then start scanning.');
                    if (scanResultMessage) scanResultMessage.className = 'mt-3 text-center font-medium text-yellow-600 h-10';
                }

                if (isScannerActive) {
                    clearScannerUi().then(() => {
                        updateElementText(scanResultMessage, 'Scanning stopped.');
                    });
                } else {
                    if (!html5QrcodeScanner) {
                        html5QrcodeScanner = new Html5QrcodeScanner(
                            qrScannerUiContainerId,
                            {
                                fps: 10,
                                qrbox: { width: 250, height: 250 },
                                aspectRatio: 1.0,
                                rememberLastUsedCamera: true,
                            },
                            false
                        );
                    }
                    updateElementText(scanResultMessage, 'Starting camera... Please allow permission.');
                    if (scanResultMessage) scanResultMessage.className = 'mt-3 text-center font-medium h-10 text-gray-600';
                    updateElementText(startScanButton, '✖️ Stop Scanning');

                    html5QrcodeScanner.render(onScanSuccess, onScanFailure);
                    isScannerActive = true;
                }
            });
        } else {
            console.error("Start button (startScanButton) not found!");
        }
    });
</script>
{{/inline}}
{{/main}}
