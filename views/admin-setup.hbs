{{#> main}}
{{#*inline "content"}}
<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-800 mb-10 text-center">{{title}}</h1>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">

        <div class="bg-white p-6 rounded-xl shadow-lg ring-1 ring-gray-900/5">
            <h2 class="text-xl font-semibold text-gray-700 mb-6 border-b pb-2">Create New Partner</h2>
            <form id="createPartnerForm" class="space-y-4">
                <div>
                    <label for="partnerName" class="block text-sm font-medium text-gray-600">Partner Name:</label>
                    <input type="text" id="partnerName" name="name" required class="mt-1 block w-full input-style">
                </div>
                <div>
                    <label for="fiscalId" class="block text-sm font-medium text-gray-600">Fiscal ID (Tax No):</label>
                    <input type="text" id="fiscalId" name="fiscalId" required class="mt-1 block w-full input-style">
                </div>
                <div>
                    <label for="partnerUsername" class="block text-sm font-medium text-gray-600">Login Username:</label>
                    <input type="text" id="partnerUsername" name="username" required
                        class="mt-1 block w-full input-style">
                </div>
                <div>
                    <label for="partnerPassword" class="block text-sm font-medium text-gray-600">Login Password:</label>
                    <input type="password" id="partnerPassword" name="password" required
                        class="mt-1 block w-full input-style">
                </div>
                <button type="submit" class="w-full btn-primary">Create Partner</button>
                <div id="partnerFormMessage" class="mt-3 text-sm result-message"></div>
            </form>
        </div>

        <div class="bg-white p-6 rounded-xl shadow-lg ring-1 ring-gray-900/5">
            <h2 class="text-xl font-semibold text-gray-700 mb-6 border-b pb-2">Create New Venue</h2>
            <form id="createVenueForm" class="space-y-4">
                <div>
                    <label for="venuePartnerSelect" class="block text-sm font-medium text-gray-600">Partner:</label>
                    <select id="venuePartnerSelect" name="partnerId" required
                        class="mt-1 block w-full input-style select-style">
                        <option value="">Select Partner...</option>
                    </select>
                </div>
                <div>
                    <label for="venueName" class="block text-sm font-medium text-gray-600">Venue Name:</label>
                    <input type="text" id="venueName" name="name" required class="mt-1 block w-full input-style">
                </div>
                <button type="submit" class="w-full btn-primary">Create Venue</button>
                <div id="venueFormMessage" class="mt-3 text-sm result-message"></div>
                <p class="text-xs font-semibold text-red-600 mt-2 text-center bg-red-50 border border-red-200 rounded px-2 py-1 shadow-sm">
                    <svg class="inline w-4 h-4 mr-1 text-red-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" aria-hidden="true" style="vertical-align:middle;">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01M21 12A9 9 0 1 1 3 12a9 9 0 0 1 18 0z"/>
                    </svg>
                    Login required to create a venue.
                </p>
            </form>
        </div>

        <div class="bg-white p-6 rounded-xl shadow-lg ring-1 ring-gray-900/5">
            <h2 class="text-xl font-semibold text-gray-700 mb-6 border-b pb-2">Create New Discount</h2>
            <form id="createDiscountForm" class="space-y-4">
                <div>
                    <label for="discountPartnerSelect" class="block text-sm font-medium text-gray-600">Discount Partner:</label>
                    <select id="discountPartnerSelect" name="discountPartnerId" required
                        class="mt-1 block w-full input-style select-style">
                        <option value="">Select Partner...</option>
                    </select>
                </div>
                <div>
                    <label for="discountVenueSelect" class="block text-sm font-medium text-gray-600">Venue:</label>
                    <select id="discountVenueSelect" name="venueId" required disabled
                        class="mt-1 block w-full input-style select-style bg-gray-200">
                        <option value="">Select Partner First...</option>
                    </select>
                </div>
                <div>
                    <label for="discountName" class="block text-sm font-medium text-gray-600">Discount Name/Description:</label>
                    <input type="text" id="discountName" name="name" required class="mt-1 block w-full input-style">
                </div>
                <div>
                    <label for="percentOff" class="block text-sm font-medium text-gray-600">Discount Percentage (%):</label>
                    <input type="number" id="percentOff" name="percentOff" required min="0" max="100"
                        class="mt-1 block w-full input-style">
                </div>
                <div>
                    <label for="maxUses" class="block text-sm font-medium text-gray-600">Max Uses (Per Ticket):</label>
                    <input type="number" id="maxUses" name="maxUses" required min="1"
                        class="mt-1 block w-full input-style">
                </div>
                <div>
                    <label for="discountDescription" class="block text-sm font-medium text-gray-600">Short Description (Optional):</label>
                    <input type="text" id="discountDescription" name="description"
                        class="mt-1 block w-full input-style">
                </div>
                <button type="submit" class="w-full btn-primary">Create Discount</button>
                <div id="discountFormMessage" class="mt-3 text-sm result-message"></div>
                <p class="text-xs font-semibold text-red-600 mt-2 text-center bg-red-50 border border-red-200 rounded px-2 py-1 shadow-sm">
                    <svg class="inline w-4 h-4 mr-1 text-red-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" aria-hidden="true" style="vertical-align:middle;">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01M21 12A9 9 0 1 1 3 12a9 9 0 0 1 18 0z"/>
                    </svg>
                    Login required to create a discount.
                </p>
            </form>
        </div>
    </div>
</div>

<style>
    .input-style {
        padding: 0.75rem 1rem;
        border: 1px solid #D1D5DB;
        border-radius: 0.375rem;
        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        background-color: #F9FAFB;
    }

    .input-style:focus {
        outline: none;
        border-color: #3B82F6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
    }

    .select-style {
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236B7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 0.5rem center;
        background-repeat: no-repeat;
        background-size: 1.5em 1.5em;
        padding-right: 2.5rem;
    }

    .btn-primary {
        padding: 0.75rem 1.5rem;
        background-color: #2563EB;
        color: white;
        font-weight: 500;
        border-radius: 0.375rem;
        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        transition: background-color 0.15s ease-in-out;
    }

    .btn-primary:hover {
        background-color: #1D4ED8;
    }

    .result-message {
        min-height: 1.25rem;
        font-weight: 500;
    }

    .result-message.success {
        color: #16A34A;
    }

    .result-message.error {
        color: #DC2626;
    }
</style>

<script>
    const partnerForm = document.getElementById('createPartnerForm');
    const venueForm = document.getElementById('createVenueForm');
    const discountForm = document.getElementById('createDiscountForm');

    const venuePartnerSelect = document.getElementById('venuePartnerSelect');
    const discountPartnerSelect = document.getElementById('discountPartnerSelect');
    const discountVenueSelect = document.getElementById('discountVenueSelect');

    const partnerFormMessage = document.getElementById('partnerFormMessage');
    const venueFormMessage = document.getElementById('venueFormMessage');
    const discountFormMessage = document.getElementById('discountFormMessage');

    let allPartnersCache = [];

    function showMessage(element, message, type = 'info') {
        if (!element) return;
        element.textContent = message;
        element.className = 'mt-3 text-sm result-message';
        if (type === 'success') {
            element.classList.add('success');
        } else if (type === 'error') {
            element.classList.add('error');
        } else {
            element.classList.add('text-blue-600');
        }
    }

    async function fetchPartners() {
        try {
            const response = await fetch('/partners');
            const data = await response.json();
            if (response.ok && data.partners) {
                allPartnersCache = data.partners;
                populatePartnerSelects(data.partners);
            } else {
                console.error("Failed to load partners:", data.message);
                showMessage(partnerFormMessage, `Failed to load partners: ${data.message || 'Unknown error'}`, 'error');
            }
        } catch (error) {
            console.error("Network error while loading partners:", error);
            showMessage(partnerFormMessage, `Network error while loading partners: ${error.message}`, 'error');
        }
    }

    function populatePartnerSelects(partners) {
        [venuePartnerSelect, discountPartnerSelect].forEach(select => {
            if (!select) return;
            const currentValue = select.value;
            select.innerHTML = '<option value="">Select Partner...</option>';
            partners.forEach(partner => {
                const option = new Option(partner.name, partner.id);
                select.add(option);
            });
            if (partners.some(p => p.id === currentValue)) {
                select.value = currentValue;
            }
        });
    }

    discountPartnerSelect.addEventListener('change', async function () {
        const partnerId = this.value;
        discountVenueSelect.innerHTML = '<option value="">Select Venue...</option>';
        discountVenueSelect.disabled = true;
        discountVenueSelect.classList.add('bg-gray-200');

        if (partnerId) {
            const selectedPartner = allPartnersCache.find(p => p.id === partnerId);

            if (selectedPartner && Array.isArray(selectedPartner.venues) && selectedPartner.venues.length > 0) {
                selectedPartner.venues.forEach(venue => {
                    const option = new Option(venue.name, venue.id);
                    discountVenueSelect.add(option);
                });
                discountVenueSelect.disabled = false;
                discountVenueSelect.classList.remove('bg-gray-200');
            } else {
                discountVenueSelect.innerHTML = '<option value="">No venues for this partner</option>';
            }
        }
    });

    partnerForm.addEventListener('submit', async function (event) {
        event.preventDefault();
        showMessage(partnerFormMessage, 'Creating partner...', 'info');

        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/partners', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    name: data.name,
                    fiscalId: data.fiscalId,
                    username: data.username,
                    password: data.password,
                })
            });
            const result = await response.json();

            if (response.ok && result.success) {
                showMessage(partnerFormMessage, result.message || 'Partner created successfully!', 'success');
                this.reset();
                fetchPartners();
            } else {
                throw new Error(result.message || 'Failed to create partner.');
            }
        } catch (error) {
            showMessage(partnerFormMessage, `Error: ${error.message}`, 'error');
        }
    });

    venueForm.addEventListener('submit', async function (event) {
        event.preventDefault();
        showMessage(venueFormMessage, 'Creating venue...', 'info');
        const authToken = localStorage.getItem('authPartnerToken');

        if (!authToken) {
            showMessage(venueFormMessage, 'You must be logged in as a partner to create a venue.', 'error');
            return;
        }

        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/venues', {
                method: 'POST',
                headers: {
                    'Authorization': 'Basic ' + authToken,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    partnerName: data.partnerName,
                    venueName: data.name,
                    partnerId: data.partnerId,
                })
            });
            const result = await response.json();

            if (response.ok && result.success) {
                showMessage(venueFormMessage, result.message || 'Venue created successfully!', 'success');
                this.reset();
                fetchPartners();
            } else {
                throw new Error(result.message || 'Failed to create venue.');
            }
        } catch (error) {
            showMessage(venueFormMessage, `Error: ${error.message}`, 'error');
        }
    });

    discountForm.addEventListener('submit', async function (event) {
        event.preventDefault();
        showMessage(discountFormMessage, 'Creating discount...', 'info');
        const authToken = localStorage.getItem('authPartnerToken');

        if (!authToken) {
            showMessage(discountFormMessage, 'You must be logged in as a partner to create a discount.', 'error');
            return;
        }

        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        if (data.percentOff) data.percentOff = parseInt(data.percentOff, 10);
        if (data.maxUses) data.maxUses = parseInt(data.maxUses, 10);

        try {
            const response = await fetch('/discounts', {
                method: 'POST',
                headers: {
                    'Authorization': 'Basic ' + authToken,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: data.name,
                    percentOff: data.percentOff,
                    maxUses: data.maxUses,
                    partnerId: localStorage.getItem('partnerId'),
                    venueId: localStorage.getItem('venueId'),
                })
            });
            const result = await response.json();

            if (response.ok && result.success) {
                showMessage(discountFormMessage, result.message || 'Discount created successfully!', 'success');
                this.reset();
                fetchPartners();
            } else {
                throw new Error(result.message || 'Failed to create discount.');
            }
        } catch (error) {
            showMessage(discountFormMessage, `Error: ${error.message}`, 'error');
        }
    });

    document.addEventListener('DOMContentLoaded', fetchPartners);
</script>
{{/inline}}
{{/main}}
