{{#> main}}
{{#*inline "content"}}
<div class="flex justify-center items-start min-h-screen pt-8 sm:pt-12">
    <div class="w-full max-w-lg bg-white p-6 sm:p-8 rounded-xl shadow-2xl">
        <h1 class="text-3xl font-bold text-center text-gray-700 mb-8">Enter Your Email Address</h1>

        <div id="emailEntrySection">
            <form id="emailEntryForm" class="space-y-6">
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-600 mb-1">Your Email Address</label>
                    <input type="email" id="email" name="email" required class="mt-1 block w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-md shadow-sm
                          focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                          placeholder-gray-400 text-gray-700">
                </div>
                <button type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm
                         text-base font-medium text-white bg-blue-600 hover:bg-blue-700
                         focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Continue
                </button>
            </form>
        </div>
        <div id="emailEntryResult" class="mt-6 p-4 text-center" style="display: none;">
            <p class="text-lg text-green-700"></p>
        </div>

        <div>
            <p class="mt-4 text-sm text-gray-500">
                If you are not registered yet, <a href="/user-registry" class="text-blue-600 hover:underline">register here</a>.
            </p>
        </div>

        <div id="userInfoSection" class="mt-8" style="display: none;">
            <h2 id="welcomeMessage" class="text-2xl font-semibold text-gray-700 mb-6 text-center"></h2>
            <button id="getNewTicketBtn"
                class="w-full mb-6 py-3 px-4 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition-colors">
                üéüÔ∏è Get New Ticket
            </button>
            <h3 class="text-xl font-semibold text-gray-600 mb-4">My Tickets</h3>
            <div id="ticketList" class="space-y-4">
            </div>
            <p id="noTicketsMessage" class="text-gray-500" style="display: none;">You have no tickets yet.</p>
        </div>

        <div id="errorMessage" class="mt-6 p-4 bg-red-50 border border-red-300 text-red-700 rounded-md"
            style="display: none;"></div>
    </div>
</div>

<script>
    const emailEntryForm = document.getElementById('emailEntryForm');
    const emailInput = document.getElementById('email');
    const emailEntrySection = document.getElementById('emailEntrySection');
    const userInfoSection = document.getElementById('userInfoSection');
    const welcomeMessage = document.getElementById('welcomeMessage');
    const ticketListDiv = document.getElementById('ticketList');
    const noTicketsMessage = document.getElementById('noTicketsMessage');
    const getNewTicketBtn = document.getElementById('getNewTicketBtn');
    const errorMessageDiv = document.getElementById('errorMessage');
    const emailEntryResultDiv = document.getElementById('emailEntryResult');
    let user = null;

    emailEntryForm.addEventListener('submit', async function (event) {
        event.preventDefault();
        const email = emailInput.value.trim();
        if (!email) return;

        errorMessageDiv.style.display = 'none';
        userInfoSection.style.display = 'none';
        ticketListDiv.innerHTML = '';
        noTicketsMessage.style.display = 'none';

        try {
            const userResponse = await fetch(`/users/email/${email}`);
            const userData = await userResponse.json();

            if (userData.user) {
                user = userData.user;
                welcomeMessage.textContent = `Welcome, ${userData.user.name || 'User'}!`;
                emailEntrySection.style.display = 'none';
                userInfoSection.style.display = 'block';
                fetchUserTickets(userData.user.id);
            } else {
                emailEntrySection.style.display = 'none';
                emailEntryResultDiv.style.display = 'block';

                emailEntryResultDiv.querySelector('p').textContent = 'No user found with this email. Please register.';
            }
        } catch (error) {
            console.error('Error fetching user:', error);
            errorMessageDiv.textContent = 'An error occurred while retrieving user information.';
            errorMessageDiv.style.display = 'block';
        }
    });

    async function fetchUserTickets(userId) {
        try {
            const ticketsResponse = await fetch(`/tickets/get-all-tickets/${userId}`);
            const ticketsData = await ticketsResponse.json();
            if (ticketsData.tickets && ticketsData.tickets.length > 0) {
                ticketListDiv.innerHTML = '';
                ticketsData.tickets.forEach(ticket => {
                    const ticketElement = `
              <div class="bg-blue-50 p-4 rounded-lg shadow">
                <img src="${ticket.code}" class="mx-auto my-2 w-32 h-32 border p-1 bg-white rounded">
                <p class="text-xs text-gray-500">Created: ${new Date(ticket.createdAt).toLocaleDateString()}</p>
              </div>
            `;
                    ticketListDiv.innerHTML += ticketElement;
                });
            } else {
                noTicketsMessage.style.display = 'block';
            }
        } catch (error) {
            console.error('Error fetching tickets:', error);
            noTicketsMessage.textContent = 'An error occurred while loading tickets.';
            noTicketsMessage.style.display = 'block';
        }
    }

    getNewTicketBtn.addEventListener('click', async function () {
        if (!user) return;
        errorMessageDiv.style.display = 'none';
        try {
            const response = await fetch('/tickets', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    code: crypto.randomUUID(),
                    user : user
                })
            });
            const newTicketData = await response.json();
            if (response.ok) {
                fetchUserTickets(user.id);
            } else {
                errorMessageDiv.textContent = newTicketData.message || 'Could not create new ticket.';
                errorMessageDiv.style.display = 'block';
            }
        } catch (error) {
            console.error('Error creating new ticket:', error);
            errorMessageDiv.textContent = 'An error occurred while creating a new ticket.';
            errorMessageDiv.style.display = 'block';
        }
    });

</script>
{{/inline}}
{{/main}}
